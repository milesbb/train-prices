AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda function triggered by a cron job once per day

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  # Lambda Function
  TrainPricesLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "TrainPricesLambda"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.10"
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              print("Lambda function triggered by cron job.")
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Timeout: 300 # Timeout in seconds

  # CloudWatch Event Rule (Cron Job)
  CronEvent:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(0 0 * * ? *)" # Trigger once per day at midnight UTC
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt TrainPricesLambda.Arn
          Id: "TrainPricesLambdaTarget"

  # Permission for CloudWatch Events to trigger Lambda
  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref TrainPricesLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CronEvent.Arn
